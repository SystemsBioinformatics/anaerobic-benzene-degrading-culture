setwd("/media/chrats/Elements/ANVIO_binning_original_biof4/03_CONTIGS")
library(Biostrings)
refine_all_phylum <- read.delim("/media/chrats/Elements/ANVIO_binning_original_biof4/03_CONTIGS/refine_all_phylum.txt", header=FALSE)
View(refine_all_phylum)
contigs
contigs<-readDNAStringSet("contigs_splits_scaffold_DB.fa")
refine_all_phylum$V2
levels(refine_all_phylum$V2)
names(contigs)
i <- levels(refine_all_phylum$V2)[1]
i
refine_all_phylum$V2
refine_all_phylum$V2%in%i
refine_all_phylum[refine_all_phylum$V2%in%i,]
contigs_n<-refine_all_phylum[refine_all_phylum$V2%in%i,1]
contigs_n
names(contigs)
names(contigs)%in%contigs_n
contigs[names(contigs)%in%contigs_n]
i <- levels(refine_all_phylum$V2)[2]
i
contigs_n<-refine_all_phylum[refine_all_phylum$V2%in%i,1]
contigs[names(contigs)%in%contigs_n]
length( contigs[names(contigs)%in%contigs_n]c)
length( contigs[names(contigs)%in%contigs_n])
refine_all_phylum[refine_all_phylum$V2%in%i,1]
refine_all_phylum[refine_all_phylum$V2%in%i,]
View(refine_all_phylum[refine_all_phylum$V2%in%i,])
setwd("/media/chrats/Elements/ANVIO_binning_original_biof4/03_CONTIGS/SAMPLES-SUMMARY_refine_all_phylum_final")
bins_summary <- read.delim("/media/chrats/Elements/ANVIO_binning_original_biof4/03_CONTIGS/SAMPLES-SUMMARY_refine_all_phylum_final/bins_summary.txt")
View(bins_summary)
which(bins_summary$percent_completion>85)
nrow(bins_summary[which(bins_summary$percent_completion>85),])
bins_summary_85
bins_summary_85<-bins_summary[which(bins_summary$percent_completion>85),]
bins_summary_85
bins_summary_85[which(bins_summary_85$percent_redundancy<15),]
bins_summary_85_15<-bins_summary_85[which(bins_summary_85$percent_redundancy<15),]
nrow(bins_summary_85_15)
View(bins_summary_85_15)
bins_summary_85<-bins_summary[which(bins_summary$percent_completion>84),]
bins_summary_85_15<-bins_summary_85[which(bins_summary_85$percent_redundancy<15),]
View(bins_summary_85_15)
nrow(bins_summary_85_15)
bins_summary_90<-bins_summary[which(bins_summary$percent_completion>90),]
bins_summary_90_15<-bins_summary_85[which(bins_summary_85$percent_redundancy<15),]
nrow(bins_summary_90_15)
bins_summary_90_15<-bins_summary_90[which(bins_summary_90$percent_redundancy<15),]
View(bins_summary_90_15)
nrow(bins_summary_90_15)
bins_summary_90_15<-bins_summary_90[which(bins_summary_90$percent_redundancy<13),]
bins_summary_90_15
mixed<-c( "bin_013","bin_035","bin_037","bin_058","bin_059")
nrow(bins_summary_90_13)
nrow(bins_summary_90_13)
bins_summary_90_13<-bins_summary_90[which(bins_summary_90$percent_redundancy<13),]
nrow(bins_summary_90_13)
View(bins_summary_90_13)
bins_summary_90_13$bins
bins_summary_90_13[-c(10,25,27,37,38),]
View(bins_summary_90_13[-c(10,25,27,37,38),])
nrow(bins_summary_90_13[-c(10,25,27,37,38),])
bin_000.contigs_annotations <- read.delim("/media/chrats/Elements/00_FINAL_2020/MAGs/bins_refined_eggnog_annotation/bin_000-contigs_annotations.tsv", header=FALSE, comment.char="#")
View(bin_000.contigs_annotations)
read_data<-function(path){
data <- read.csv(path)
rownames(data)<-data[,1]
data<-data[,-1]
data<-t(data)
data
}
read_data<-function(path){
data <- read.csv(path)
rownames(data)<-data[,1]
data<-data[,-1]
data<-t(data)
data
}
benzen_ko1<-read_data("/media/chrats/Elements/00_FINAL_2020/MAGs/DATA/KO_tables/benzene_ko_binary.csv")
rownames(benzen_ko1)
substr()
?substr?
substr(x = rownames(benzen_ko1), 1,7)
#ABUNDANCE
bins_abund <- read.delim("/media/chrats/Elements/00_FINAL_2020/MAGs/DATA/abundance.txt")
bins_abund
substr(x = rownames(bins_abund$bins), 1,7)
substr(x = bins_abund$bins, 1,7)
bins_abund$bins<-substr(x = bins_abund$bins, 1,7)
#######################GOOOD BINS
output <- read.delim("/media/chrats/Elements/00_FINAL_2020/MAGs/DATA/bins_summary.txt")
output
output_g<-output[which(output$percent_completion> 90 ),]
output_g<-output_g[-which(output_g$percent_redundancy> 12.5 ),]
good_bins<-checkm_output[,1]
output_g
nrow(output_g)
mixed<-c( "bin_013","bin_035","bin_037","bin_058","bin_059")
output_g
substr(x =output$bins, 1,7)
#######################GOOOD BINS
output <- read.delim("/media/chrats/Elements/00_FINAL_2020/MAGs/DATA/bins_summary.txt")
output$bins<-substr(x =output$bins, 1,7)
output_g<-output[which(output$percent_completion> 90 ),]
output_g<-output_g[-which(output_g$percent_redundancy> 12.5 ),]
mixed<-c( "bin_013","bin_035","bin_037","bin_058","bin_059")
output_g$bins
output_g$bins%in%mixed
output_g[!output_g$bins%in%mixed,]
output_gg<-output_g[!output_g$bins%in%mixed,]
nrow(output_gg)
#######################GOOOD BINS
output <- read.delim("/media/chrats/Elements/00_FINAL_2020/MAGs/DATA/bins_summary.txt")
output$bins<-substr(x =output$bins, 1,7)
output_g<-output[which(output$percent_completion> 90 ),]
output_g<-output_g[-which(output_g$percent_redundancy> 13 ),]
mixed<-c( "bin_013","bin_035","bin_037","bin_058","bin_059")
output_gg<-output_g[!output_g$bins%in%mixed,]
nrow(output_gg)
View(output_gg)
good_bins<-output_gg[,1]
bins_abund
output$total_length
bin_length<-output$total_length
abuandances<-rowMeans(bins_abund[,2:3])
abuandances
(abuandances/bin_length)*mean(bin_length)
abuandances<-rowMeans(bins_abund[,2:3])
abuandances
inp_mod
test<-lapply(custom_pathways, colSums)
test_length<-c()
for (i in 1:length(test)){
test_length<-rbind(test_length,apply(custom_pathways[[i]], MARGIN = 2, nnzero))
}
custom_pathways
benzen_ko_rna<-read.csv("/media/chrats/Elements/00_FINAL_2020/MAGs/DATA/KO_tables_rna/benzene_rna_a_norm_BioLiq.csv")
rownames(benzen_ko_rna)<-substr(x = rownames(benzen_ko_rna), 1,7)
benzen_ko_rna<-benzen_ko_rna[-c(3,5,11),]
setwd("/home/chrats/Desktop/Rob/Benzene_Data/Custom_pathway_new_05_2019/custom_pathways_old/")
out<-"/home/chrats/Desktop/Rob/Benzene_Data/Custom_pathway_new_05_2019/custom_pathways_old/"
library(igraph)
cmds<-c()
flist <- list.files(pattern = ".csv$")
ko_meta<-c()
ko_names<-c()
for(j in flist){
print(j)
temp <- read.csv(paste(getwd(), j,sep = "/"), header=FALSE)
lis_temp<-apply(as.matrix(temp), MARGIN = 1, function(x) as.list(grep("^K",x,value = TRUE)))
lis_temp<-lapply(lis_temp, unlist)
is_reaction<-unlist(lapply(lis_temp, function(x) !all(is.na(x))))
# ko_temp_m<-substr(j,2,4)
ko_temp_m<-gsub(".csv","",j)
lis_R<-apply(as.matrix(temp), MARGIN = 1, function(x) grep("^R.*",x,value = TRUE))
if(is.list(lis_temp)){
names(lis_temp)<-lis_R
ko_names<-c(ko_names,unlist(lis_temp[is_reaction]))
}else{
ko_names<-c(ko_names,lis_temp)
names(ko_names)[match(lis_temp,ko_names)]<-make.unique(rep(lis_R,length(lis_temp)))
}
ko_meta<-c(ko_meta,rep(ko_temp_m,length(unlist(lis_temp[is_reaction]))))
}
reaction<-unlist(lapply(strsplit(names(ko_names),"[.]"), function(x)x[1]))
ko_meta<-as.factor(ko_meta)
library(apcluster)
benzen_ko_all<-benzen_ko_rna
benzen_ko_all_pot<-as.matrix(benzen_ko_rna)
benzen_ko_all_pot[benzen_ko_all_pot>0]<-1
ap_all<-apclusterK(corSimMat(method = "pearson"),benzen_ko_all_pot,K=3)
clusters_pw<-c()
for(i in 1:length(ap_all@clusters)){
t<-cbind(names(ap_all@clusters[[i]]),rep(i,length(ap_all@clusters[[i]])))
clusters_pw<-rbind(clusters_pw,t)
}
Clusters_all = data.frame(Clusters_all = factor(paste("c",clusters_pw[,2],sep = "")))
rownames(Clusters_all)<-clusters_pw[,1]
colnames(Clusters_all)<-"Clusters_all"
levels(Clusters_all$Clusters_all)<-c("groupA","groupC","groupB")
ann_colors = list(
Clusters_all = c(groupA = "#66c2a5", groupC = "#fc8d62", groupB = "#8da0cb")
)
cols<-c("white",'#fdd49e','#fdbb84','#fc8d59','#ef6548','#d7301f','#b30000','#7f0000')
library(RColorBrewer)
breaksList = seq(0, 16, by = 1)
cols<-colorRampPalette(rev(brewer.pal(n = 7, name = "Spectral")))(length(breaksList))
cols[1:2]<-c("white","black")
benzen_ko_rna<-as.matrix(benzen_ko_rna)
pdw<-"/media/chrats/Elements/00_FINAL_2020/MAGs/PLOTS/supp/custom_heatmaps_bioliq/"
i<-1
ko_meta
levels(ko_meta)
i<-8
temp<-ko_meta == levels(ko_meta)[i]
mat<-benzen_ko_rna[,sapply(ko_names[temp], function(x) match(x,colnames(benzen_ko_rna)))]
colnames(mat)<-gsub("[.].*","",paste(ko_names[temp],names(ko_names[temp]),sep = "-"))
mat[is.na(mat)] <- 0
reaction_temp<-reaction[temp]
mat<-t(mat)
reactions<-as.factor(reaction_temp)
side<-as.data.frame(reactions)
rownames(side)<-rownames(mat)
mat<-log2(mat)
mat[is.infinite(mat)]<- -1
pheatmap(mat, annotation_colors = ann_colors,annotation_col = Clusters_all, annotation_row = side,
cluster_rows=F,color=cols,main =levels(ko_meta)[i],
gaps_row=cumsum(rle(as.character(side[,1]))[[1]]),breaks = c(-1.5,-0.1,0,seq(max(mat))))
library(pheatmap)
pheatmap(mat, annotation_colors = ann_colors,annotation_col = Clusters_all, annotation_row = side,
cluster_rows=F,color=cols,main =levels(ko_meta)[i],
gaps_row=cumsum(rle(as.character(side[,1]))[[1]]),breaks = c(-1.5,-0.1,0,seq(max(mat))))
library(pheatmap)
for(i in 1:length(levels(ko_meta))){
print(i)
temp<-ko_meta == levels(ko_meta)[i]
mat<-benzen_ko_rna[,sapply(ko_names[temp], function(x) match(x,colnames(benzen_ko_rna)))]
colnames(mat)<-gsub("[.].*","",paste(ko_names[temp],names(ko_names[temp]),sep = "-"))
mat[is.na(mat)] <- 0
reaction_temp<-reaction[temp]
mat<-t(mat)
reactions<-as.factor(reaction_temp)
side<-as.data.frame(reactions)
rownames(side)<-rownames(mat)
mat<-log2(mat)
mat[is.infinite(mat)]<- -1
pdf(width = 8,height = 6,file = paste(pdw,levels(ko_meta)[i],"_BioLiq",".pdf",sep = ""))
pheatmap(mat, annotation_colors = ann_colors,annotation_col = Clusters_all, annotation_row = side,
cluster_rows=F,color=cols,main =levels(ko_meta)[i],
gaps_row=cumsum(rle(as.character(side[,1]))[[1]]),breaks = c(-1.5,-0.1,0,seq(max(mat))))
dev.off()
}
dev.off()
for(i in 1:length(levels(ko_meta))){
print(i)
temp<-ko_meta == levels(ko_meta)[i]
mat<-benzen_ko_rna[,sapply(ko_names[temp], function(x) match(x,colnames(benzen_ko_rna)))]
colnames(mat)<-gsub("[.].*","",paste(ko_names[temp],names(ko_names[temp]),sep = "-"))
mat[is.na(mat)] <- 0
reaction_temp<-reaction[temp]
mat<-t(mat)
reactions<-as.factor(reaction_temp)
side<-as.data.frame(reactions)
rownames(side)<-rownames(mat)
mat<-log2(mat)
mat[is.infinite(mat)]<- -1
pdf(width = 8,height = 6,file = paste(pdw,levels(ko_meta)[i],"_BioLiq",".pdf",sep = ""))
pheatmap(mat, annotation_colors = ann_colors,annotation_col = Clusters_all, annotation_row = side,
cluster_rows=F,color=cols,main =levels(ko_meta)[i],
gaps_row=cumsum(rle(as.character(side[,1]))[[1]]),breaks = c(-1.5,-0.1,0,seq(max(mat))))
dev.off()
}
dev.off()
